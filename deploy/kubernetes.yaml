apiVersion: v1
kind: ServiceAccount
metadata:
  name: crds-objects-browser
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: crds-objects-browser
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crds-objects-browser
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: crds-objects-browser
subjects:
- kind: ServiceAccount
  name: crds-objects-browser
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crds-objects-browser
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crds-objects-browser
  template:
    metadata:
      labels:
        app: crds-objects-browser
    spec:
      serviceAccount: crds-objects-browser
      containers:
      - name: browser
        image: crds-objects-browser:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        env:
        - name: TZ
          value: Asia/Shanghai
      #   volumeMounts:
      #   - name: config
      #     mountPath: /root/.kube
      #     readOnly: true
      # volumes:
      # - name: config
      #   configMap:
      #     name: crds-objects-browser-kubeconfig 
---
apiVersion: v1
kind: Service
metadata:
  name: crds-objects-browser
  namespace: default
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
  selector:
    app: crds-objects-browser
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: crds-objects-browser
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: crds-browser.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: crds-objects-browser
            port:
              number: 80 